name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        echo "ENV=test" > .env
        echo "PORT=3001" >> .env
        echo "POSTGRES_DB=test_db" >> .env
        echo "POSTGRES_USER=test_user" >> .env
        echo "POSTGRES_PASSWORD=test_password" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "JWT_SECRET=test-jwt-secret-key-for-ci-pipeline" >> .env

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Setup test database
      run: |
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -f sql/01-schema.sql
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -f sql/02-data.sql

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build application
      run: npm run build

  build:
    needs: test
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build and Push Docker Image
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker build -t $DOCKER_USERNAME/tech-challenge2:latest \
          --build-arg PORT=${{ secrets.PORT }} \
          --build-arg ENV=${{ secrets.ENV }} \
          --build-arg POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
          --build-arg POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
          --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --build-arg POSTGRES_DB=${{ secrets.POSTGRES_DB }} .
          docker push $DOCKER_USERNAME/tech-challenge2:latest
